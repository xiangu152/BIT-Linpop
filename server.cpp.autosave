#include "server.h"
#include "ui_server.h"
#include <QTcpServer>
#include <QTcpSocket>
#include <QSqlDatabase>
#include <QSqlQuery>
#include <QSqlError>
#include <QDateTime>

int currentsize;

server::server(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::server)
{
    qDebug()<<"hallo world";
    ui->setupUi(this);
    tcpServer = new QTcpServer();
    ui->listWidget->clear();
    ui->listWidget->insertItem(0,tr("Users"));
    QListWidgetItem* item = new QListWidgetItem(tr("No users Online"));
    item->setForeground(Qt::red);
    ui->listWidget->insertItem(1, item);
    //ui
    for(int i = 0; i < M; i++)
    {
        tcpSocket[i]=new QTcpSocket();
    }
    tcpServer->listen(QHostAddress::Any,22222);

    db = QSqlDatabase::addDatabase("QSQLITE");

    //判断是否建立了用户表
    db.setDatabaseName("./Users.db");
    db.open();
    //ini db
    QSqlQuery sqlquery;
    if(sqlquery.exec("CREATE TABLE if not exists Users (id INTEGER NOT NULL UNIQUE,name TEXT NOT NULL UNIQUE,password TEXT NOT NULL,ip TEXT,islogin INTEGER NOT NULL,sign TEXT,fileName INTEGER DEFAULT id,PRIMARY KEY(id))"))
        qDebug()<<"database ok";
    if(sqlquery.exec("CREATE TABLE if not exists Friendship (id1 INTEGER NOT NULL,name1 TEXT NOT NULL,id2 INTEGER NOT NULL,name2 TEXT NOT NULL,relationship INTEGER NOT NULL)"))
        qDebug()<<"friendship ok";
    if(sqlquery.exec("CREATE TABLE if not exists History (id1 INTEGER NOT NULL,id2 INTEGER NOT NULL,Message TEXT,date datetime)"))
        qDebug()<<"History OK";
    else
        qDebug()<<sqlquery.lastQuery();
    db.close();

    connect(tcpServer,&QTcpServer::newConnection,[=](){

        tcpSocket[0] = tcpServer->nextPendingConnection();

        currentsize++;

        QString ip = tcpSocket[0]->peerAddress().toString().section(":",3,3);
        int port = tcpSocket[0]->peerPort();
        QString str = QString("%1:%2").arg(ip).arg(port);
        qDebug() << str ;
        QByteArray buffe = tcpSocket[0]->readAll();
        qDebug()<<QString(buffe);
        connect(tcpSocket[0],&QTcpSocket::readyRead,[=](){
            //读取缓冲区数据
            QByteArray buffer = tcpSocket[0]->readAll();
            qDebug()<<QString(buffer);
            if("CheckLogin" == QString(buffer).section("##",0,0))
            {//登陆

                db.setDatabaseName("./Users.db");
                db.open();
                QSqlQuery sqlquery;
                QString ping="select * from Users where id = "+QString(buffer).section("##",1,1);
                if(sqlquery.exec(ping))
                    qDebug()<<"database for login no bug";
                // use id to locate users
                else
                    qDebug()<<sqlquery.lastQuery();
                if(!sqlquery.next())
                {//No such Users
                    tcpSocket[0]->write(QString("wrong").toUtf8());
                    tcpSocket[0]->flush();
                    db.close();
                }
                else
                {//用户存在
                    QString id = sqlquery.value(0).toString();
                    QString password = sqlquery.value(2).toString();
                    qDebug()<<id<<password<<QString(buffer).section("##",2,2);
                    if(password == QString(buffer).section("##",2,2))
                    {//登录成功
                        qDebug()<<"success login in";
                        QString sqlstring ="select * from Users where id = "+id;
                        qDebug()<<sqlstring;
                        sqlquery.exec(sqlstring);
                        sqlquery.next();
                        QString BACK="getInformation##"+sqlquery.value(1).toString()+"##"+sqlquery.value(3).toString()+"##"+sqlquery.value(5).toString()+"##"+sqlquery.value(6).toString()+"##";
                        qDebug()<<BACK;
                        tcpSocket[0]->write(BACK.toUtf8());
                        tcpSocket[0]->flush();
                        QString ip = QString(buffer).section("##",3,3);
                        QString check="update Users set  islogin=1 where id = "+id;
                        if(sqlquery.exec(check))
                            qDebug()<<"login success no bug"<<sqlquery.lastQuery();
                        else
                            qDebug()<<sqlquery.lastQuery();

                        //更新服务器界面
                        ui->listWidget->clear();
                        sqlquery.exec("select * from Users where islogin = 1");
                        if(sqlquery.next())
                        {
                            QString userid = sqlquery.value(0).toString();
                            QString username = sqlquery.value(1).toString();
                            QString userip = sqlquery.value(3).toString();
                            qDebug()<<userid<<username<<userip;
                            ui->listWidget->insertItem(0,"ID："+userid+",NAME:"+username+",IP:"+userip);
                            int rownum = 1;
                            while (sqlquery.next())
                            {
                                QString userid = sqlquery.value(0).toString();
                                QString username = sqlquery.value(1).toString();
                                QString userip = sqlquery.value(3).toString();
                                ui->listWidget->insertItem(rownum,"ID："+userid+",NAME:"+username+",IP:"+userip);
                                rownum++;
                            }
                            db.close();
                        }
                        else
                        {   qDebug()<<sqlquery.lastQuery();
                            ui->listWidget->clear();
                            ui->listWidget->insertItem(0,tr("NO USERS ONLINE"));
                            db.close();
                        }
                    }
                    else
                    {//密码错误
                        tcpSocket[0]->write(QString("wrong").toUtf8());
                        tcpSocket[0]->flush();
                        db.close();
                    }
                }
            }
            else if("Register" == QString(buffer).section("##",0,0))
            {//注册环节
                db.setDatabaseName("./Users.db");
                db.open();
                qDebug()<<db.tables();
                QSqlQuery sqlquery;
                //注册用户的时候需要进行判重
                sqlquery.prepare("select * from Users where id = :id");
                sqlquery.bindValue(":id",QString(buffer).section("##",1,1));
                if(sqlquery.exec())
                    qDebug()<<"database for refister no bug";
                else
                    qDebug()<<"something bug";
                if(!sqlquery.next())
                {//可以新建
                    sqlquery.clear();
                    QString ping = "insert into Users values (" + QString(buffer).section("##", 1, 1) + ", '"+QString(buffer).section("##", 1, 1)+"', '" + QString(buffer).section("##", 2, 2) + "', '" + QString(buffer).section("##", 3, 3) + "', 0, 'there is no sign',"+"2)";
                    qDebug()<<ping;
                    if(sqlquery.exec(ping))
                        qDebug()<<"register insert no bug";
                    else
                        qDebug()<<sqlquery.lastQuery();
                    sqlquery.clear();
                    tcpSocket[0]->write(QString("right").toUtf8());
                    tcpSocket[0]->flush();
                    db.close();
                }
                else
                {//有重名
                     tcpSocket[0]->write(QString("wrong").toUtf8());
                     tcpSocket[0]->flush();
                     db.close();
                }
            }
            else if("WantInformation"==QString(buffer).section("##",0,0))
            {
//                db.setDatabaseName("./Users.db");
//                db.open();
//                QSqlQuery sqlquery;
//                QString id = QString(buffer).section("##",1,1);
//                QString sqlstring ="select * from Users where id = "+id;
//                qDebug()<<sqlstring;
//                if(sqlquery.exec(sqlstring))
//                {
//                     sqlquery.next();
//                     QString BACK="getInformation##"+sqlquery.value(1).toString()+"##"+sqlquery.value(3).toString()+"##"+sqlquery.value(5).toString()+"##"+sqlquery.value(6).toString()+"##";
//                     qDebug()<<BACK;
//                     tcpSocket[0]->write(BACK.toUtf8());
//                     tcpSocket[0]->flush();
//                     db.close();
//                }
//                else
//                {
//                     qDebug()<<"fail to get information"<<sqlquery.lastQuery();
//                     db.close();
//                }
            }
            else if("Change" == QString(buffer).section("##",0,0))
            {
                db.setDatabaseName("./Users.db");
                db.open();
                QSqlQuery sqlquery;
                QString Chan="update Users set name = '"+QString(buffer).section("##",3,3)+"' , ip = '"+QString(buffer).section("##",4,4)+"' , sign = '"+QString(buffer).section("##",5,5)+" ' , fileName = "+QString(buffer).section("##",2,2)+" where id = "+QString(buffer).section("##",1,1);
                if(sqlquery.exec(Chan))
                {
                     qDebug()<<QString("Change_ok##%1").arg(QString(buffer).section("##",1,1));
                     tcpSocket[0]->write(QString("Change_ok##%1").arg(QString(buffer).section("##",1,1)).toUtf8());
                     tcpSocket[0]->flush();
                     db.close();
                }
                else
                {   qDebug()<<sqlquery.lastQuery();
                    tcpSocket[0]->write(QString("Change_error").toUtf8());
                    tcpSocket[0]->flush();
                    db.close();
                }
            }
            else if("get_History" == QString(buffer).section("##",0,0))
            {
                QString idone = QString(buffer).section("##",1,1);
                QString idtwo = QString(buffer).section("##",2,2);
                db.setDatabaseName("./Users.db");
                db.open();
                QSqlQuery sqlquery;
                QString sqlstring = "select * from History where (id1="+idone+" and id2="+idtwo+") OR ( id1="+idtwo+" and id2="+idone+" )"+" ORDER BY date DESC";
                qDebug()<<sqlstring;
                if(sqlquery.exec(sqlstring))
                    qDebug()<<"get history no  bug";
                else
                    qDebug()<<sqlquery.lastQuery();
                if(sqlquery.next())
                {
                    QString history ="History_ok##";
                    QList <QString> TEXTLIST;
                    QList <QString> Timelist;
                    QList <QString> IDlist;
                    do{

                        TEXTLIST.append(sqlquery.value(2).toString());
                        Timelist.append(sqlquery.value(3).toString());
                        IDlist.append(sqlquery.value(0).toString());
                    }while(sqlquery.next());
                    int num=TEXTLIST.size();
                    QString T=QString::number(num);
                    history=history+T+"##";
                    for(int i=0;i<num;i++)
                    {
                        history=history+Timelist[i]+"##";
                        history=history+TEXTLIST[i]+"##";
                        history=history+IDlist[i]+"##";
                    }
                    qDebug()<<history;
                    tcpSocket[0]->write(history.toUtf8());
                    tcpSocket[0]->flush();
                    db.close();
                }
//                else
//                {//无历史记录
//                    tcpSocket[0]->write(QString("chat_history_error").toUtf8());
//                    tcpSocket[0]->flush();
//                    db.close();
//                }
            }
            else if("SEND_MESSAGE" == QString(buffer).section("##",0,0))
            {//one发消息的，two收消息的
                QString R="receive_ok";
                tcpSocket[0]->write(R.toUtf8());
                tcpSocket[0]->flush();
                qDebug()<<"success";
                QDateTime currentDateTime = QDateTime::currentDateTime();
                QString formattedDateTime = currentDateTime.toString("yyyy-MM-dd hh:mm:ss");
                QString idone = QString(buffer).section("##",1,1);
                QString idtwo = QString(buffer).section("##",2,2);
                db.setDatabaseName("./Users.db");
                db.open();
                QSqlQuery sqlquery;
                QString sqlstring = "insert into History values("+idone+","+idtwo+","+"'"+QString(buffer).section("##",3,3)+"','"+QString("%1").arg(formattedDateTime)+"')";
                qDebug()<<sqlstring;
                if(sqlquery.exec(sqlstring))
                {
                    qDebug()<<"send message ok";
                }
                else
                    qDebug()<<sqlquery.lastQuery();
//                sqlstring = "update friend__" + QString::number(idtwo) + " set sendmassage = 1 where id = :id";
//                db.setDatabaseName("./Users.db");
//                db.open();
//                sqlquery.clear();
//                sqlquery.prepare(sqlstring);
//                sqlquery.bindValue(":id", idone);
//                sqlquery.exec();
                db.close();
            }
            else if("logout" == QString(buffer).section("##",0,0))
            {
                db.setDatabaseName("./Users.db");
                db.open();
                QSqlQuery sqlquery;
                QString LogOUT="update Users set islogin=0 where id ="+QString(buffer).section("##",1,1);
                if(sqlquery.exec(LogOUT))
                    qDebug()<<"LogOUT no bug";
                else
                    qDebug()<<sqlquery.lastQuery();

                //更新服务器界面
                ui->listWidget->clear();
                sqlquery.prepare("select * from Users where islogin = 1");
                sqlquery.exec();
                if(sqlquery.next())
                {
                    QString userid = sqlquery.value(0).toString();
                    QString username = sqlquery.value(1).toString();
                    QString userip = sqlquery.value(3).toString();
                    //qDebug()<<userid;
                    ui->listWidget->insertItem(0,"ID："+userid+",NAME:"+username+",IP:"+userip);
                    int rownum = 1;
                    while (sqlquery.next())
                    {
                        QString userid = sqlquery.value(0).toString();
                        QString username = sqlquery.value(1).toString();
                        QString userip = sqlquery.value(3).toString();
                        ui->listWidget->insertItem(rownum,"ID："+userid+",昵称:"+username+",IP:"+userip);
                        rownum++;
                    }
                }
                else
                {
                    ui->listWidget->clear();
                    ui->listWidget->insertItem(0,tr("当前无在线用户"));
                }
            }
            else if("Get_FriendList" == QString(buffer).section("##",0,0))
            {
                db.setDatabaseName("./Users.db");
                db.open();
                QSqlQuery sqlquery;
                QString BACK="Get_Friendlist_ok##";
                QString ID =QString(buffer).section("##",1,1);
                QString Temp="select * from Friendship where id1="+ID;
                sqlquery.exec(Temp);
                if(sqlquery.next())
                {
                    QList <QString> friendIdlist;
                    QList <QString> friendNamelist;
                    QList <QString> friendIPlist;
                    QList <QString> friendImagelist;
                    QList <QString> friendOnLinelist;
                    QList <QString> friendMessagelist;
                    QList <QString> friendFilelist;
                    QList <QString> friendTextlist;
                    do{
                        QString friend_id=sqlquery.value(2).toString();
                        QSqlQuery TEST;
                        QString Temp="select * from Users where id ="+friend_id;
                        TEST.exec(Temp);
                        TEST.next();
                        friendIdlist.append(TEST.value(0).toString());
                        friendNamelist.append(TEST.value(1).toString());
                        friendIPlist.append(TEST.value(3).toString());
                        friendOnLinelist.append(TEST.value(4).toString());
                        friendImagelist.append(TEST.value(6).toString());
                        friendTextlist.append(TEST.value(5).toString());
                        friendMessagelist.append("0");
                        friendFilelist.append("0");
                    }while(sqlquery.next());
                    int num=friendIdlist.size();
                    QString T=QString::number(num);
                    BACK=BACK+T+"##";
                    for(int i=0;i<friendIdlist.length();i++)
                    {
                        BACK=BACK+friendIdlist[i]+"##";
                        BACK=BACK+friendIPlist[i]+"##";
                        BACK=BACK+friendNamelist[i]+"##";
                        BACK=BACK+friendImagelist[i]+"##";
                        BACK=BACK+friendTextlist[i]+"##";
                        BACK=BACK+friendOnLinelist[i]+"##";
                        BACK=BACK+friendMessagelist[i]+"##";
                        BACK=BACK+friendTextlist[i]+"##";
                    }
                    qDebug()<<BACK;
                    tcpSocket[0]->write(BACK.toUtf8());
                    tcpSocket[0]->flush();
                    db.close();
                }
                else
                {//无朋友
                    tcpSocket[0]->write((QString("Get_Friendlist_Error##")+ID).toUtf8());
                    tcpSocket[0]->flush();
                    db.close();
                }
            }
            else if("Add_Friend" == QString(buffer).section("##",0,0))
            {
                QString id1 = QString(buffer).section("##",1,1);
                QString friend_name = QString(buffer).section("##",2,2);

                qDebug() << id1 << friend_name;

                db.setDatabaseName("./Users.db");
                db.open();
                QSqlQuery sqlquery;
                QString Sea="select * from Friendship";
                qDebug()<<Sea;
                sqlquery.exec(Sea);
                sqlquery.next();
                do{
                    qDebug()<<sqlquery.value(0).toString()<<sqlquery.value(1).toString()<<sqlquery.value(2).toString();
                }
                while(sqlquery.next());
                if(sqlquery.exec(Sea))
                {
                    QSqlQuery TEST;
                    QString Temp="select * from Users where name='"+friend_name+"'";
                    TEST.exec(Temp);
                    TEST.next();
                    QString Myname="";
                    QString S="select * from Users where id = "+QString(buffer).section("##",1,1);
                    qDebug()<<S;
                    sqlquery.exec(S);
                    sqlquery.next();
                    Myname=sqlquery.value(1).toString();
                    sqlquery.clear();
                    QString friend_id = QString(TEST.value(0).toString());
                    qDebug() <<sqlquery.value(0).toString()<<friend_id;
                    sqlquery.clear();
                    QString TES="select * from Friendship where id1 ="+id1+" and id2 = "+friend_id;
                    qDebug()<<TES;
                    sqlquery.exec(TES);
                        if(sqlquery.next())
                    {
                        do{
                            qDebug()<<sqlquery.value(0).toString()<<sqlquery.value(1).toString()<<sqlquery.value(2).toString();
                        }
                        while(sqlquery.next());
                        qDebug()<<"existing";
                        tcpSocket[0]->write(QString("add_friend_error##exist").arg(id1).arg(friend_name).toUtf8());
                        tcpSocket[0]->flush();
                        db.close();
                    }
                    else
                    {
                        qDebug()<<sqlquery.lastQuery();
                    QString sqlstring = "insert into Friendship values("+id1+",'"+Myname+"',"+friend_id+",'"+friend_name+"'"+",1)";
                    qDebug()<<sqlstring;
                    if(sqlquery.exec(sqlstring))
                        qDebug()<<"find friend success no bug";
                    else
                        qDebug()<<sqlquery.lastQuery();
                    qDebug()<<sqlquery.lastError();
                    tcpSocket[0]->write(QString("Add_Friend_ok##%1##%2").arg(id1).arg(friend_name).toUtf8());
                    tcpSocket[0]->flush();
                    db.close();}
                }
                else
                {//没这人
                    if(QString(buffer).section("##",2,2)==QString(buffer).section("##",3,3))
                    {
                        tcpSocket[0]->write(QString("add_friend_error##%NotMe").toUtf8());
                        tcpSocket[0]->flush();
                    }
                    else
                    {   tcpSocket[0]->write(QString("add_friend_error##%1").arg(id1).toUtf8());
                        tcpSocket[0]->flush();}
                    db.close();
                }
            }
            else if("Delete_Friend" == QString(buffer).section("##",0,0))
            {
                QString id1 = QString(buffer).section("##",1,1);
                QString id2 = QString(buffer).section("##",2,2);
                qDebug()<<id1<<id2;
                db.setDatabaseName("./Users.db");
                db.open();
                QSqlQuery sqlquery;
                QString Sea="select * from Friendship";
                qDebug()<<Sea;
                sqlquery.exec(Sea);
                sqlquery.next();
                do{
                    qDebug()<<sqlquery.value(0).toString()<<sqlquery.value(1).toString()<<sqlquery.value(2).toString();
                }
                while(sqlquery.next());
                QString Temp="delete from Friendship where id1 ="+id1+" and id2="+id2;
                qDebug()<<Temp;

                if(sqlquery.exec(Temp))
                {
                    qDebug("delete friendship no bug");
                    tcpSocket[0]->write(QString("Delete_Friend_Ok##%1##%2").arg(id1).arg(id2).toUtf8());
                    tcpSocket[0]->flush();
                    db.close();
                }
                else
                {   qDebug()<<sqlquery.lastQuery();
                    tcpSocket[0]->write(QString("delete_friend_error").toUtf8());
                    tcpSocket[0]->flush();
                    db.close();
                }
            }

        });
    });
}

server::~server()
{
    tcpServer->close();
    tcpServer->deleteLater();
    delete ui;
}
